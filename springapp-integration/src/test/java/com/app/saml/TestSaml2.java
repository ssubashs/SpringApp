package com.app.saml;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.security.cert.CertificateException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import javax.xml.xpath.XPathExpressionException;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.opensaml.Configuration;
import org.opensaml.DefaultBootstrap;
import org.opensaml.saml2.core.Artifact;
import org.opensaml.saml2.core.impl.AuthnRequestImpl;
import org.opensaml.xml.ConfigurationException;
import org.opensaml.xml.XMLObject;
import org.opensaml.xml.io.Unmarshaller;
import org.opensaml.xml.io.UnmarshallerFactory;
import org.opensaml.xml.io.UnmarshallingException;
import org.opensaml.xml.util.Base64;
import org.springframework.security.saml.util.SAMLUtil;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import com.saml.sso.AccountSettings;
import com.saml.sso.AppSettings;
import com.saml.sso.AuthRequest;
import com.saml.sso.Response;

public class TestSaml2 {
	AuthnRequestImpl impl;
	AppSettings samlSetting = new AppSettings();	
	AccountSettings accSetting = new AccountSettings();
	
	static
	{
		try {
			DefaultBootstrap.bootstrap();
		} catch (ConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	};
	
	String encodedResponse = "PHNhbWxwOlJlc3BvbnNlIFZlcnNpb249IjIuMCIgSUQ9IklEMjcxZTVkOTEtMjQ2MS00ODE3LWI1M2UtMjdmNWY1ZjhhZWU2IiBJc3N1ZUluc3RhbnQ9IjIwMTUtMDEtMjZUMTk6NTY6MjRaIiBEZXN0aW5hdGlvbj0iIiB4bWxuczpjb209Imh0dHA6Ly9zY2hlbWFzLnp1cmljaC5jb20venNvYS9maWcvc2VjdXJpdHlwcm9jZXNzaW5nLzIwMDkvMDEvY29tbW9uIiB4bWxuczp6c29hPSJodHRwOi8vc2NoZW1hcy56dXJpY2guY29tL3pzb2EvZmlnL3NlY3VyaXR5cHJvY2Vzc2luZy8yMDA5LzAxL3pzb2EiIHhtbG5zOnNlYz0iaHR0cDovL3dlYnNlcnZpY2VzLnp1cmljaC5jb20venNvYS9maWcvc2VjdXJpdHlwcm9jZXNzaW5nL3NlY3VyaXR5dG9rZW5tYW5hZ2VyLXYxXzAiIHhtbG5zOnNvYXBlbnY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczpzaWduPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PG5zMTpJc3N1ZXIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDplbnRpdHkiIHhtbG5zOm5zMT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+RmFybWVyczwvbnMxOklzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIFZlcnNpb249IjIuMCIgSUQ9IlNBTUwtNzcyNjFiYzEtNGFlMi00MjJmLThlZjktYTc3Nzc5MWQ1YzU5IiBJc3N1ZUluc3RhbnQ9IjIwMTUtMDEtMjZUMTk6NTY6MjRaIj48c2FtbDI6SXNzdWVyPkZhcm1lcnM8L3NhbWwyOklzc3Vlcj48U2lnbmF0dXJlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPFNpZ25lZEluZm8+CiAgPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KICA8U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CiAgPFJlZmVyZW5jZSBVUkk9IiNTQU1MLTc3MjYxYmMxLTRhZTItNDIyZi04ZWY5LWE3Nzc3OTFkNWM1OSI+CiAgICA8VHJhbnNmb3Jtcz4KICAgICAgPFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CiAgICAgIDxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KICAgIDwvVHJhbnNmb3Jtcz4KICAgIDxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgogICAgPERpZ2VzdFZhbHVlPm5oeGF3ODg4Q0NBVG51RElITVNEbWpIVFNvOD08L0RpZ2VzdFZhbHVlPgogIDwvUmVmZXJlbmNlPgo8L1NpZ25lZEluZm8+CiAgICA8U2lnbmF0dXJlVmFsdWU+MlI0UmNvdkhKdjBsdGFTbFZBeTdlVHFYRkZ4RVdwMHRtUG9udHJHWVdmYmtzMUpNdGFzd2NiVFNHakJJMVdLUFMvUGpQWFNXM0xHdmxFN0dRdTBoU0NkeXVLR0pjL0wxZS80R08rYUM3cHlCc3VPQTNuUnkyNWJDMUlqSWFha1R5akx2c05mdU5OUHBqL3JsQWh5eFQrMEM1OXRac1IyMEFRZS92S21iUGRyQWo4ajg4bS9nWVY1eHNtVlBLSVg1RVVlekRVcktTN2huNVRWSzBKd0JBcE51QkhwUWEyd2xlUE81L3MvL1hjVTJvNmw4TFpiQTVDeFU1OTdDaTQzbFZFSnIvamkycm90eGpVOVRhMk52aUxnK3ZrWVlnY1BZQStnb0Nqbm04RStVeExnVERBRE93Y1N1ZUNWRkZxanNYSWFPSDU4MklmMStDZ1hmRDA4Y3dnPT08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOUNlcnRpZmljYXRlPk1JSUVXVENDQTBHZ0F3SUJBZ0lJUWRONitBQW94ekV3RFFZSktvWklodmNOQVFFRkJRQXdkekVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFrTkJNUll3RkFZRFZRUUtFdzFHWVhKdFpYSnpJRWR5YjNWd01Sb3dHQVlEVlFRTEV4RkdZWEp0WlhKeklFbHVjM1Z5WVc1alpURW5NQ1VHQTFVRUF4TWVhRzB5YVdKa2NIRmhMbVpoY20xbGNuTnBibk4xY21GdVkyVXVZMjl0TUI0WERURXpNRFl5TVRJd05EVTBOMW9YRFRFMU1EWXlNVEl3TkRVME4xb3dkekVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFrTkJNUll3RkFZRFZRUUtFdzFHWVhKdFpYSnpJRWR5YjNWd01Sb3dHQVlEVlFRTEV4RkdZWEp0WlhKeklFbHVjM1Z5WVc1alpURW5NQ1VHQTFVRUF4TWVhRzB5YVdKa2NIRmhMbVpoY20xbGNuTnBibk4xY21GdVkyVXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEzdXJaK1ZzZnErSk5IV1dxR2FxbHZJMXQyUzBtRG5uYkRackhZZSthVkxkdkQvK2pZb3M1VjNGM3VPcS8zblNUR1lIUTVKOGp0N2h4SXVFZGc4MENldUtNRk1GMXZSVTJDTVlISkFYRUdMK0Uxck5QckdWcFE3Z0lQQ3RoSGNQd0s2bURLa0Q1RWVjNW9xNkJ5T0dYeHFKREJJOHZ1ZHNlMTdsclp4b2RtOCtuVXR2TUw1UHFqZkpBN04rOW9EQVRXcEZTUjYzZXhYcEk0aENnaGg5ckluak1Cd1lGVldENmF6a0tCOEV2QUlKSVNGVzVDUXRjVnZtbHY1UlBjclJtOVdOMXExaSs0ZmZ3T0RRZXlNSHY5WkRKTjdGL0cxdFJBMzJDWFZXa1VPK280d3VjeWtZL0JTQ1VUR2V6RG50b0M0WHJkTlhJWXU2ZStvSjYxLzAzT1FJREFRQUJvNEhvTUlIbE1Bd0dBMVVkRXdRRk1BTUJBZjh3SFFZRFZSME9CQllFRk01SktBVFl4ZWM2RytiM1dGbDBCdDZkeXBDME1JR29CZ05WSFNNRWdhQXdnWjJBRk01SktBVFl4ZWM2RytiM1dGbDBCdDZkeXBDMG9YdWtlVEIzTVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRUNCTUNRMEV4RmpBVUJnTlZCQW9URFVaaGNtMWxjbk1nUjNKdmRYQXhHakFZQmdOVkJBc1RFVVpoY20xbGNuTWdTVzV6ZFhKaGJtTmxNU2N3SlFZRFZRUURFeDVvYlRKcFltUndjV0V1Wm1GeWJXVnljMmx1YzNWeVlXNWpaUzVqYjIyQ0NFSFRldmdBS01jeE1Bc0dBMVVkRHdRRUF3SUN2REFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBdGkvKzZiTEhaVnlEZEw2SGJ1MkpERUFvRUJidUZ1alNFY2ZOSFNKVGN1Z3hQak5qbnBPUms4dUdNN1kwRnJLNlpxRlhtTXFvREtERnFpWnFRRGNiM1lhbHI2d2FjRDFWYTlEcWZGblhoSFY0T1pkck5uZVpCWnRYdExLNGhxVmNKeThCKy9tanFjMEFlYlB4OWJVNHZ6SkV6WitwSGp0K1h1UlVHMkxkM3hTUHdkZnNTeS80OVlLVGdJTjhVNmY2L1RIa0ZuVHl2K1ZELzE4MUVFeWdOZHc3QUhIbU9MaHV2YmZnNGJGRGJlNFdSZXp3Tkc1aGxHSGtaN1ZDbVhhZG9xSTFaTVQxTTVKdlFuVkdGVUpUb01Vb0Y4K2dWTEluVjI1WFdXN3I3R2FDMWlLSWRvenkrMkR0OEdzc3BQUHcvT1VYNHpSbWxIWUl2T0RvMGZ6ejRBPT08L1g1MDlDZXJ0aWZpY2F0ZT48WDUwOUlzc3VlclNlcmlhbD48WDUwOUlzc3Vlck5hbWU+Q049aG0yaWJkcHFhLmZhcm1lcnNpbnN1cmFuY2UuY29tLCBPVT1GYXJtZXJzIEluc3VyYW5jZSwgTz1GYXJtZXJzIEdyb3VwLCBTVD1DQSwgQz1VUzwvWDUwOUlzc3Vlck5hbWU+PFg1MDlTZXJpYWxOdW1iZXI+NDc0MzI3MDAzODEyNDQxNDc2OTwvWDUwOVNlcmlhbE51bWJlcj48L1g1MDlJc3N1ZXJTZXJpYWw+PC9YNTA5RGF0YT48L0tleUluZm8+PC9TaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIj5yZW5uNTk5PC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDE1LTAxLTI3VDA1OjU2OjI5WiIgUmVjaXBpZW50PSJodHRwczovL2Vmbm9sLWZhcm1lcnMuY3MxNC5mb3JjZS5jb20vZWZub2wvbG9naW4/c289MDBEYzAwMDAwMDN0a2tKIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTUtMDEtMjZUMTk6NTY6MTlaIiBOb3RPbk9yQWZ0ZXI9IjIwMTUtMDEtMjdUMDU6NTY6MjlaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+aHR0cHM6Ly9lZm5vbGRldnRlc3QuZm9yY2UuY29tPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1ZGllbmNlPmh0dHBzOi8vZWZub2wtZmFybWVycy5jczE0LmZvcmNlLmNvbS9lZm5vbC9sb2dpbj9zbz0wMERjMDAwMDAwM3Rra0o8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNS0wMS0yNlQxOTo1NjoyNFoiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMTUtMDEtMjdUMDU6NTY6MjlaIj48c2FtbDI6U3ViamVjdExvY2FsaXR5IEFkZHJlc3M9IjEwLjE0MS4yNTQuODciLz48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZCIgTmFtZT0iRmlyc3RfTmFtZSI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlPlJveTwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkIiBOYW1lPSJMYXN0X05hbWUiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZT5Sb2dlcnM8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZCIgTmFtZT0iQU9SIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+ODgwMjA5PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiIE5hbWU9IkVtYWlsIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+cnJvZ2Vyc0BmYXJtZXJzYWdlbnQuY29tPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiIE5hbWU9IlVzZXJJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlPnJlbm41OTk8L3NhbWwyOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDI6QXR0cmlidXRlPjxzYW1sMjpBdHRyaWJ1dGUgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZCIgTmFtZT0iUm9sZSI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlPkFnZW50PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWxwOlJlc3BvbnNlPg==";
	//String encodedResponse = "";
	
	@Before
	public void init()
	{
		
		URL url = this.getClass().getResource("/saml/hm2ibdpqa.farmersinsurance.com-sscert.cer");
		File certFile = new File(url.getFile());
		samlSetting.setAssertionConsumerServiceUrl("https://efnol-farmers.cs14.force.com/efnol/login?so=00Dc0000003tkkJ");
		samlSetting.setIssuer("https://efnoldevtest.force.com");		
		accSetting.setIdpSsoTargetUrl("http://localhost:9081/AdeWeb/ade?req_page=saml2");
		accSetting.setCertificatePath("/saml/hm2ibdpqa.farmersinsurance.com-sscert.cer");
		
		
	}
	
	@Test
	public void testSaml2Request()
	{
		
		AuthRequest samlRequest = new AuthRequest(samlSetting, accSetting);
		try {
			System.out.println(samlRequest.getRequest(AuthRequest.base64));
		} catch (XMLStreamException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		BasicSAMLMessageContext<SAMLObject, SAMLObject, SAMLObject> context = 
		
		/*
			HttpServletResponseAdapter responseAdapter = new HttpServletResponseAdapter(response, true);
			  BasicSAMLMessageContext<SAMLObject, AuthnRequest, SAMLObject> context = new BasicSAMLMessageContext<SAMLObject, AuthnRequest, SAMLObject>();  
			  context.setPeerEntityEndpoint();
			  context.setOutboundSAMLMessage(samlRequest);
			  context.setOutboundSAMLMessageSigningCredential(getSigningCredential());
			  context.setOutboundMessageTransport(responseAdapter);
			  
			  HTTPRedirectDeflateEncoder encoder = new HTTPRedirectDeflateEncoder();
			 
			  try {
			   encoder.encode(context);
			  } catch (MessageEncodingException e) {
			   logger.error(e.getMessage(), e);
			  }
			 }
		*/		
		

	}
	
	@Test
	public void testSaml2Response()
	{
		//URL url = this.getClass().getResource("/saml/samlresponse.xml");
		//File testxml = new File(url.getFile());
		
		
		 
		Response samlResponse;
		try {
			samlResponse = new Response(accSetting);
			 samlResponse.loadXmlFromBase64(encodedResponse);
//			  samlResponse.setDestinationUrl("https://configdev-farmers.cs7.force.com/selfservicebilling/login?so=00DM00000014CUL");
			 samlResponse.setDestinationUrl("https://efnol-farmers.cs14.force.com/efnol/login?so=00Dc0000003tkkJ");
			 
			 if(samlResponse.isValid())
				 System.out.println("valid request");
			 else
				 System.out.println("invalid request");
		} catch (CertificateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 
		
	}
	
	
	@Test
	public void saml2Unmarshall()
	{
		byte[] base64DecodedResponse = Base64.decode(encodedResponse);
		ByteArrayInputStream is = new ByteArrayInputStream(base64DecodedResponse);

		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		documentBuilderFactory.setNamespaceAware(true);
		DocumentBuilder docBuilder = null;
		org.opensaml.saml2.core.Response response = null;
		try {
			docBuilder = documentBuilderFactory.newDocumentBuilder();
			Document document = docBuilder.parse(is);
			Element element = document.getDocumentElement();
			UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory();
			Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(element);
			XMLObject responseXmlObj = unmarshaller.unmarshall(element);
			response =  (org.opensaml.saml2.core.Response) responseXmlObj;
			
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnmarshallingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
			Assert.assertNotNull(response);

		
	}
	
	
	public void testSamlUtils()
	{
//	OpenSAMLUtils.buildSAMLObject(Artifact.class);
		
    
	}

}
